-------------------------NEW API FOR CHATBOT:-----------------------

\*\*LIVE LINK : https://wedding-production-e6b8.up.railway.app

1.  GET API : http://localhost:8500/api/auth/chatdetails?authId=6464855699641087a53b46e0

2.  POST API : http://localhost:8500/api/auth/chatdetails

                    {
        "order": 0,
        "authId": "6464855699641087a53b46e0",
        "photos": [
          {
            "public_id": "photo1",
            "url": "https://example.com/photo1.jpg",
            "size": 1024,
            "name": "Photo 1"
          },
          {
            "public_id": "photo2",
            "url": "https://example.com/photo2.jpg",
            "size": 2048,
            "name": "Photo 2"
          }
        ],
        "videos": [
          {
            "public_id": "video1",
            "url": "https://example.com/video1.mp4",
            "size": 5120,
            "name": "Video 1"
          }
        ],
        "messages": [
          "Message 1",
          "Message 2"
        ],
        "location": ["Wedding Venue"],
        "date": "2023-07-01",
        "time": "18:00",
        "options": [
          {
            "name": "Option 1",
            "order": 1
          },
          {
            "name": "Option 2",
            "order": 2
          }
        ],
        "textInput": {
          "order": 456
        }

    }








    <!-- UPDATE APIs -->

    **(:id -> document id)

   1.  // PUT method to update a specific field of a wedding document
           API : http://localhost:8500/api/auth/chatdetails/:id


  2. // DELETE request, set empty all fields at once not delete:
            API: http://localhost:8500/api/auth/chatdetails/:id/set_empty


  3. // DELETE method to delete the entire wedding document:
          API: http://localhost:8500/api/auth/chatdetails/:id
          

  4. // DELETE method to delete a specific field in the wedding document
           API : http://localhost:8500/api/auth/chatdetails/:id/:field

            field like: messages or photos or location etc.


  5. // DELETE method to delete a particular photo from photos 
            API : http://localhost:8500/api/auth/chatdetails/:id/photos/:photoId


  6. // DELETE method to delete a particular video 
            API : http://localhost:8500/api/auth/chatdetails/:id/videos/:videoId
        
        
  7. // POST method to add more photos 
            API: http://localhost:8500/api/auth/chatdetails/:id/addPhotos


  8. // POST method to add more videos 
            API : http://localhost:8500/api/auth/chatdetails/:id/addVideos

    <!-- UPDATE APIs -->

-------------------------NEW API FOR CHATBOT:-----------------------

Wedding Application APi:

API-> https://wedding-production-e6b8.up.railway.app

1. welcome details messages payload  
   End Point: http://localhost:8500/api/welcomemessages

{
"authId":(\_\_\_\_),
"messages":[
"hello",
"there"
],
"photo":"single photo"

}

2.wedding details payload:
End point: http://localhost:8500/api/weddingeventdetails

{
"authId":(**\_**),
"venue":"Delhi",
"location":"noida",
"date":"2023-05-05",
"time":"07",
"photos":[{
"mutiple photos"
}]
}

ENDPOINTS:

1.  POST | Add user -> http://localhost:8500/api/adduser

2.  GET | getalluser -> http://localhost:8500/api/adduser

3.  GET | MERGE DETAILS -> http://localhost:8500/api/mergedetails?authId=6464855699641087a53b46e0

4.  POST | REGISTER -> http://localhost:8500/api/auth/register
    //body->form-data:
    {
    authName:"Akash",
    authEmail:"akash@gmail.com",
    authPassword:"123456"
    }

5.  POST | LOGIN -> http://localhost:8500/api/auth/login

            //body->form-data:
            {
                authEmail:"akash@gmail.com",
                authPassword:"123456"
            }

6.  POST | ADD COLLECTION: -> http://localhost:8500/api/auth/add-collection
    //body->form-data:
    {
    authId:"(login \_id)",
    collectionName:"Anything",
    inviteType:"general/close"
    photos:{
    multiple files
    }
    }

POST | ADD MORE PHOTOS: -> http://localhost:8500/api/auth/add-morephoto

                {
                    collectionId:(collection _id),
                    photos:{

                    }
                }

GET | GET PARTICULER USER COLLECTIONS: -> http://localhost:8500/api/auth/get-collection?authId=(login \_id)

            //Params:
             {
               authId:"(login _id)"
            }

9. POST | ADD VIDEO COLLECTION: -> http://localhost:8500/api/auth/add-video-collection
   //body->form-data:
   {
   authId:"(login \_id)",
   videoCollectionName:"Anything",
   inviteType:"general/close"
   videos:{
   multiple files
   }
   }

POST | ADD MORE VIDEOS: -> http://localhost:8500/api/auth/add-video-more

                {
                    collectionId:(collection _id),
                    videos:{

                    }
                }

GET | GET PARTICULER USER VIDEOs COLLECTIONS: -> http://localhost:8500/api/auth//get-video-collection?authId=6464855699641087a53b46e0

            //Params:
             {
               authId:"(login _id)"
            }

10. POST | POLL:
    API: http://localhost:8500/api/auth/polls

    //body->form data:
    {
    authId:**\_\_\_\_**,
    inviteType:**\_\_\_\_**,
    question:**\_\_\_**,
    options:**\_\_\_\_**,
    options:**\_\_\_\_**,
    options:**\_\_\_\_**,
    options:**\_\_\_\_**,
    }

// PUT | Update the vote count on click particular option:
API: http://localhost:8500/api/auth/polls/:id/vote

            //Params:
             {
               id:"(poll _id)"
            }

            //body->form data:
                optionIndex : (option _id),

GET | Get specific polls by authId:
API: http://localhost:8500/api/auth/get-polls?authId=(auth \_id)

         //Params:
             {
               authId:"(login _id)"
             }

11. POST | Create Music playlist:

        API: http://localhost:8500/api/auth/playlists

        //body->form data:
        	{
                authId:________,
                inviteType:__________,
                playListName:_________,
                playListUrl:________,

        	}

GET | Get specific Playlist by authId:
API : http://localhost:8500/api/auth/get-playlists?authId=6464855699641087a53b46e0

        //Params:
             {
               authId:"(login _id)"
             }

12. POST | Create Gift list:

        API: http://localhost:8500/api/auth/giftlists

        //body->form data:
        	{
                authId:________,
                inviteType:__________,
                giftName:_________,
                receivedGift: Boolean value -> true or false,

        	}

GET | Get specific Gift List by authId:
API : http://localhost:8500/api/auth/get-giftlists?authId=6464855699641087a53b46e0

        //Params:
             {
               authId:"(login _id)"
             }

PUT | Update receivedGift status:
API: http://localhost:8500/api/auth/giftlists/:id/gift

            //Params:
             {
               id:"(giftlists _id)"
            }

            //body->form data:
                 receivedGift: Boolean value -> true or false,,

13. POST | Create Calender Events:
    API -> http://localhost:8500/api/auth/events

               //body->form data:
               {
                   authId:________,
                   inviteType:__________,
                   eventName:________,
                   eventLocation:________,
                   eventTime:__________,
                   eventDate:_________,

               }


    GET | Calender Events:
            API-> http://localhost:8500/api/auth/get-events?authId=6464855699641087a53b46e0

            //Params:
             {
               authId:"(login _id)"
             }

14. GET | Images, Videos, polls Count:

        API : http://localhost:8500/api/auth/statistics?authId=6464855699641087a53b46e0

3.wedding images payload : (no need now)
End Point:localhost:8500/api/weddingimages
{
"userid":1,
"weddingimages":[
"image.jpg",
"image1.jpg",
"image2.jpg"

      ]

      }
